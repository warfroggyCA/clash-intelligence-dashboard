/**
 * Export Utilities for Command Center
 * Provides formatting for Discord, CSV, and clipboard exports
 */

import type { Member } from '@/types';
import type { Alert } from './alerts-engine';

// Discord formatting helpers
export const discord = {
  bold: (text: string) => `**${text}**`,
  italic: (text: string) => `*${text}*`,
  code: (text: string) => `\`${text}\``,
  codeBlock: (text: string, lang = '') => `\`\`\`${lang}\n${text}\n\`\`\``,
  quote: (text: string) => `> ${text}`,
  header: (text: string, level: 1 | 2 | 3 = 1) => '#'.repeat(level) + ` ${text}`,
  bullet: (text: string) => `• ${text}`,
  emoji: {
    trophy: '🏆',
    warning: '⚠️',
    fire: '🔥',
    star: '⭐',
    chart: '📊',
    shield: '🛡️',
    crossed_swords: '⚔️',
    gift: '🎁',
    zzz: '💤',
    check: '✅',
    x: '❌',
    arrow_up: '📈',
    arrow_down: '📉',
  }
};

/**
 * Format elder promotion candidates for Discord
 */
export function formatElderPromotionsForDiscord(candidates: Member[]): string {
  if (candidates.length === 0) {
    return `${discord.emoji.check} ${discord.bold('Elder Promotion Candidates')}\n\nNo candidates meet the criteria at this time.`;
  }

  let message = `${discord.emoji.star} ${discord.bold('Elder Promotion Candidates')} ${discord.emoji.star}\n\n`;
  message += `Found ${discord.bold(candidates.length.toString())} member${candidates.length === 1 ? '' : 's'} ready for promotion:\n\n`;

  candidates.forEach((member, index) => {
    message += `${discord.bold(`${index + 1}. ${member.name}`)} ${discord.code(`#${member.tag}`)}\n`;
    message += `   ${discord.emoji.trophy} Trophies: ${member.trophies?.toLocaleString() || 0}\n`;
    message += `   ${discord.emoji.gift} Donations: ${member.donations?.toLocaleString() || 0}\n`;
    message += `   ${discord.emoji.crossed_swords} War Stars: ${member.warStars || 0}\n`;
    if (member.clanCapitalContributions) {
      message += `   ${discord.emoji.shield} Capital Gold: ${member.clanCapitalContributions.toLocaleString()}\n`;
    }
    message += '\n';
  });

  message += `${discord.italic('Generated by Clash Intelligence Dashboard')}`;
  return message;
}

/**
 * Format watchlist for Discord
 */
export function formatWatchlistForDiscord(watchlist: { member: Member; reason: string; severity: 'high' | 'medium' | 'low' }[]): string {
  if (watchlist.length === 0) {
    return `${discord.emoji.check} ${discord.bold('Watchlist')}\n\nAll members performing well!`;
  }

  let message = `${discord.emoji.warning} ${discord.bold('Watchlist - Members Needing Attention')} ${discord.emoji.warning}\n\n`;
  
  const high = watchlist.filter(w => w.severity === 'high');
  const medium = watchlist.filter(w => w.severity === 'medium');
  const low = watchlist.filter(w => w.severity === 'low');

  if (high.length > 0) {
    message += `${discord.bold('🔴 High Priority')} (${high.length}):\n`;
    high.forEach(item => {
      message += `${discord.bullet} ${discord.bold(item.member.name)} - ${item.reason}\n`;
    });
    message += '\n';
  }

  if (medium.length > 0) {
    message += `${discord.bold('🟡 Medium Priority')} (${medium.length}):\n`;
    medium.forEach(item => {
      message += `${discord.bullet} ${item.member.name} - ${item.reason}\n`;
    });
    message += '\n';
  }

  if (low.length > 0) {
    message += `${discord.bold('🟢 Low Priority')} (${low.length}):\n`;
    low.forEach(item => {
      message += `${discord.bullet} ${item.member.name} - ${item.reason}\n`;
    });
    message += '\n';
  }

  message += `${discord.italic('Generated by Clash Intelligence Dashboard')}`;
  return message;
}

/**
 * Format alerts for Discord
 */
export function formatAlertsForDiscord(alerts: Alert[]): string {
  if (alerts.length === 0) {
    return `${discord.emoji.check} ${discord.bold('Clan Alerts')}\n\nNo alerts at this time. Everything looks good!`;
  }

  let message = `${discord.emoji.warning} ${discord.bold('Clan Intelligence Alerts')} ${discord.emoji.chart}\n\n`;
  
  const high = alerts.filter(a => a.priority === 'high');
  const medium = alerts.filter(a => a.priority === 'medium');
  const low = alerts.filter(a => a.priority === 'low');

  if (high.length > 0) {
    message += `${discord.bold('🔴 High Priority')} (${high.length} alert${high.length === 1 ? '' : 's'}):\n`;
    high.forEach(alert => {
      message += `${discord.bullet} ${discord.bold(alert.title)}\n`;
      message += `   ${alert.description}\n`;
    });
    message += '\n';
  }

  if (medium.length > 0) {
    message += `${discord.bold('🟡 Medium Priority')} (${medium.length} alert${medium.length === 1 ? '' : 's'}):\n`;
    medium.forEach(alert => {
      message += `${discord.bullet} ${alert.title}: ${alert.description}\n`;
    });
    message += '\n';
  }

  if (low.length > 0) {
    message += `${discord.bold('🟢 Low Priority')} (${low.length} alert${low.length === 1 ? '' : 's'}):\n`;
    low.forEach(alert => {
      message += `${discord.bullet} ${alert.title}\n`;
    });
    message += '\n';
  }

  message += `${discord.italic('Generated by Clash Intelligence Dashboard')}`;
  return message;
}

/**
 * Format weekly summary for Discord
 */
export function formatWeeklySummaryForDiscord(data: {
  totalMembers: number;
  activeMembers: number;
  totalDonations: number;
  avgTrophies: number;
  warWins?: number;
  warLosses?: number;
  topDonors: Member[];
  topTrophyGainers: Member[];
}): string {
  let message = `${discord.emoji.chart} ${discord.bold('Weekly Clan Summary')} ${discord.emoji.chart}\n\n`;
  
  message += `${discord.bold('Clan Stats:')}\n`;
  message += `${discord.bullet} Total Members: ${data.totalMembers}\n`;
  message += `${discord.bullet} Active Members: ${data.activeMembers}\n`;
  message += `${discord.bullet} Total Donations: ${data.totalDonations.toLocaleString()}\n`;
  message += `${discord.bullet} Avg Trophies: ${Math.round(data.avgTrophies).toLocaleString()}\n`;
  
  if (data.warWins !== undefined && data.warLosses !== undefined) {
    const total = data.warWins + data.warLosses;
    const winRate = total > 0 ? ((data.warWins / total) * 100).toFixed(1) : '0.0';
    message += `${discord.bullet} War Record: ${data.warWins}W - ${data.warLosses}L (${winRate}%)\n`;
  }
  
  message += '\n';
  
  if (data.topDonors.length > 0) {
    message += `${discord.emoji.gift} ${discord.bold('Top Donors:')}\n`;
    data.topDonors.slice(0, 3).forEach((member, i) => {
      message += `${discord.bullet} ${i + 1}. ${member.name} - ${member.donations?.toLocaleString() || 0} donations\n`;
    });
    message += '\n';
  }
  
  if (data.topTrophyGainers.length > 0) {
    message += `${discord.emoji.trophy} ${discord.bold('Top Trophy Pushers:')}\n`;
    data.topTrophyGainers.slice(0, 3).forEach((member, i) => {
      message += `${discord.bullet} ${i + 1}. ${member.name} - ${member.trophies?.toLocaleString() || 0} trophies\n`;
    });
    message += '\n';
  }
  
  message += `${discord.italic('Generated by Clash Intelligence Dashboard')}`;
  return message;
}

/**
 * Copy text to clipboard
 */
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
}

/**
 * Convert data to CSV format
 */
export function toCSV(headers: string[], rows: string[][]): string {
  const csvRows = [headers.join(',')];
  
  rows.forEach(row => {
    const escaped = row.map(cell => {
      // Escape quotes and wrap in quotes if contains comma
      const cellStr = String(cell);
      if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
        return `"${cellStr.replace(/"/g, '""')}"`;
      }
      return cellStr;
    });
    csvRows.push(escaped.join(','));
  });
  
  return csvRows.join('\n');
}

/**
 * Export elder candidates to CSV
 */
export function exportElderCandidatesToCSV(candidates: Member[]): string {
  const headers = ['Name', 'Tag', 'Role', 'Trophies', 'Donations', 'War Stars', 'Capital Gold', 'Town Hall'];
  const rows = candidates.map(member => [
    member.name,
    member.tag,
    member.role || 'member',
    String(member.trophies || 0),
    String(member.donations || 0),
    String(member.warStars || 0),
    String(member.clanCapitalContributions || 0),
    String(member.townHallLevel || member.th || 0),
  ]);
  
  return toCSV(headers, rows);
}

/**
 * Export watchlist to CSV
 */
export function exportWatchlistToCSV(watchlist: { member: Member; reason: string; severity: string }[]): string {
  const headers = ['Name', 'Tag', 'Severity', 'Reason', 'Trophies', 'Donations', 'Last Activity'];
  const rows = watchlist.map(item => [
    item.member.name,
    item.member.tag,
    item.severity,
    item.reason,
    String(item.member.trophies || 0),
    String(item.member.donations || 0),
    'N/A', // Would need activity tracking
  ]);
  
  return toCSV(headers, rows);
}

/**
 * Download CSV file
 */
export function downloadCSV(filename: string, csvContent: string): void {
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
